name: Deploy to Azure Test Environment

on:
  workflow_dispatch:
    branches: [ main ]
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
  TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
  ENVIRONMENT: DEV

jobs:
  test-api:
    name: Test API
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd api
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    # - name: Run API tests
    #   run: |
    #     cd api
    #     python -m pytest test_main.py -v

  build-and-deploy:
    name: Build and Deploy to Azure
    runs-on: ubuntu-latest
    needs: test-api
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Destroy (Cleanup Previous Environment)
      run: |
        cd terraform
        terraform destroy -auto-approve \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="image_tag=${{ github.sha }}" || true

    - name: Terraform Plan (Infrastructure)
      run: |
        cd terraform
        terraform plan \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="image_tag=${{ github.sha }}"

    - name: Terraform Apply (Phase 1 - Infrastructure)
      run: |
        cd terraform
        echo "üèóÔ∏è Phase 1: Deploying infrastructure (ACR, Storage, Networking)..."
        terraform apply -auto-approve \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="image_tag=${{ github.sha }}" \
          -target=azurerm_resource_group.neo4j_interview \
          -target=azurerm_virtual_network.neo4j_interview \
          -target=azurerm_subnet.neo4j_interview \
          -target=azurerm_network_security_group.neo4j_interview \
          -target=azurerm_subnet_network_security_group_association.neo4j_interview \
          -target=azurerm_container_registry.neo4j_interview \
          -target=azurerm_storage_account.neo4j_interview \
          -target=azurerm_storage_share.neo4j_data \
          -target=random_string.suffix

    - name: Build and push Docker images
      run: |
        echo "üê≥ Building and pushing Docker images..."
        
        cd terraform
        
        # Get ACR details from terraform output
        ACR_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
        ACR_USERNAME=$(terraform output -raw container_registry_admin_username)
        ACR_PASSWORD=$(terraform output -raw container_registry_admin_password)
        
        echo "üîê Logging into ACR: $ACR_LOGIN_SERVER"
        # Login to ACR
        echo "$ACR_PASSWORD" | docker login $ACR_LOGIN_SERVER -u $ACR_USERNAME --password-stdin
        
        cd ..
        
        # Build and push the FastAPI application image
        echo "üì¶ Building FastAPI application image..."
        docker build -t neo4j-interview-app:${{ github.sha }} .
        docker tag neo4j-interview-app:${{ github.sha }} $ACR_LOGIN_SERVER/neo4j-interview-app:${{ github.sha }}
        docker push $ACR_LOGIN_SERVER/neo4j-interview-app:${{ github.sha }}
        echo "‚úÖ FastAPI app image pushed to ACR!"
        
        # Pull, tag and push Neo4j image
        echo "üì¶ Pulling and pushing Neo4j image..."
        docker pull neo4j:5.13-community
        docker tag neo4j:5.13-community $ACR_LOGIN_SERVER/neo4j:5.13-community
        docker push $ACR_LOGIN_SERVER/neo4j:5.13-community
        echo "‚úÖ Neo4j image pushed to ACR!"
        
        echo "üéâ All images successfully pushed to ACR!"

    - name: Terraform Apply (Phase 2 - Containers)
      run: |
        cd terraform
        echo "üöÄ Phase 2: Deploying Neo4j and App containers..."
        terraform apply -auto-approve \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="image_tag=${{ github.sha }}"
        echo "‚úÖ Neo4j and App containers deployed successfully!"

    - name: Wait for deployment and run health checks
      run: |
        cd terraform
        
        # Get application URL
        APP_URL=$(terraform output -raw app_url)
        NEO4J_URL=$(terraform output -raw neo4j_browser_url)
        
        echo "Application URL: $APP_URL"
        echo "Neo4j Browser URL: $NEO4J_URL"
        
        # Wait for services to be ready (up to 10 minutes)
        echo "Waiting for services to be ready..."
        for i in {1..60}; do
          if curl -f "$APP_URL/health" > /dev/null 2>&1; then
            echo "‚úÖ Application is healthy!"
            break
          fi
          echo "‚è≥ Waiting for application... (attempt $i/60)"
          sleep 10
        done
        
        # Final health check
        if ! curl -f "$APP_URL/health"; then
          echo "‚ùå Application health check failed"
          exit 1
        fi

    - name: Run integration tests
      run: |
        cd terraform
        
        # Get application URL
        APP_URL=$(terraform output -raw app_url)
        
        echo "Running integration tests against $APP_URL"
        
        # Test API endpoints
        echo "Testing root endpoint..."
        curl -f "$APP_URL/" || exit 1
        
        echo "Testing health endpoint..."
        curl -f "$APP_URL/health" || exit 1
        
        echo "Testing employees endpoint..."
        curl -f "$APP_URL/employees" || exit 1
        
        echo "Testing graph endpoint..."
        curl -f "$APP_URL/graph" || exit 1
        
        echo "‚úÖ All integration tests passed!"

    - name: Output deployment information
      run: |
        cd terraform
        echo "üöÄ Deployment completed successfully!"
        echo ""
        echo "üìã Deployment Details:"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo ""
        echo "üîó Service URLs:"
        echo "Application: $(terraform output -raw app_url)"
        echo "Neo4j Browser: $(terraform output -raw neo4j_browser_url)"
        echo ""
        echo "üè∑Ô∏è Resource Group: $(terraform output -raw resource_group_name)"

  cleanup-on-failure:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Cleanup failed deployment
      run: |
        cd terraform
        echo "üßπ Cleaning up failed deployment..."
        terraform destroy -auto-approve \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="image_tag=${{ github.sha }}" || true
        echo "‚úÖ Cleanup completed"
